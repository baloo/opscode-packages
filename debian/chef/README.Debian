chef packages for Debian
------------------------

Please see the Chef Wiki for information on components that may be changed,
or find out how you can improve Chef by contributing.

Chef is normally distributed as a RubyGem, so gets its dependencies through
RubyGems. These packages are independent of RubyGems. All dependencies are 
handled like other normal Debian packages.

The 'chef' package will install a client that can run with a server via the
'chef-client' command. The client configuration file needs to be modified 
to point at the appropriate server. By default this is set to localhost.

  /etc/chef/client.rb

  chef_server_url "http://localhost:4000"

Chef can be run in 'solo' mode though, which does not connect to a server. To
do this, use the 'chef-solo' command instead of 'chef-client'.
  
The 'chef-server', 'chef-server-api', 'chef-solr' packages will install a server.
Chef server is a Merb application slice, and by default the server will start
up from an init script as a thin server on port 4000.

Chef server uses CouchDB to store node attribute data and RabbitMQ for an
AMQP message queue.

A note about RubyGems
---------------------

RubyGems is recommended for libchef-ruby1.8 because Chef has a resource that can 
handle Gem packages. That will only work in recipes if RubyGems is installed.

Rake is recommended because libchef-ruby1.8 has a set of rake tasks that can
be used to manage a Chef Repository. For more information about setting up
a Chef Repository, see the Chef wiki.

http://wiki.opscode.com/display/chef/Chef+Repository

Additional Resources
--------------------

The official documentation for Chef is on the Opscode wiki:

  http://wiki.opscode.com/display/chef/Home

Opscode also hosts mailing lists:

  http://lists.opscode.com/

And there's an IRC channel on Freenode:

  irc://irc.freenode.net/chef

 -- Joshua Timberman <joshua@opscode.com>  Mon, 03 Aug 2009 22:14:03 -0600
